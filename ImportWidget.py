# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ImportWidget.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import time
import matplotlib.pyplot as plt
import pickle

import pyqtgraph
from PyQt5.QtCore import QFile,QSettings, QSize, QMetaObject, QCoreApplication
from PyQt5.QtGui import *
from PyQt5.Qt import *
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QComboBox, QPushButton, \
    QSizePolicy, QSpacerItem, QTreeWidget, QFileDialog, QTreeWidgetItem, QDialog
import readThermoElement
from datetime import datetime
from writeThermoElement import writeFIN2

from matplotlib.backends.qt_compat import QtWidgets
from matplotlib.backends.backend_qtagg import (
    FigureCanvas, NavigationToolbar2QT as NavigationToolbar)
from matplotlib.figure import Figure

class Ui_Form(object):
    def __init__(self):
        self.dataDir = {}
        self.startTime = {}
        self.startDir = '/Volumes/GoogleDrive/My Drive/LA-ICP-MS/External_User_Data/Ingersoll/RVI22-01/Data/RVI_22_01_SEQ1'

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1000, 500)
        Form.setMinimumSize(QSize(150, 0))
        self.horizontalLayout = QHBoxLayout(Form)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_3 = QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label = QLabel(Form)
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)

        self.instrumentType = QComboBox(Form)
        self.instrumentType.setMinimumSize(QSize(150, 0))
        self.instrumentType.setObjectName("instrumentType")
        self.instrumentType.addItems(["Thermo Element", "P-E NexION"])
        self.verticalLayout_3.addWidget(self.instrumentType)

        self.loadImported = QPushButton(Form)
        self.loadImported.setObjectName("loadImported")
        self.verticalLayout_3.addWidget(self.loadImported)

        self.addFilesBtn = QPushButton(Form)
        self.addFilesBtn.setObjectName("addFilesBtn")
        self.verticalLayout_3.addWidget(self.addFilesBtn)

        self.addDirBtn = QPushButton(Form)
        self.addDirBtn.setObjectName("addDirBtn")
        self.verticalLayout_3.addWidget(self.addDirBtn)

        self.removeFilesBtn = QPushButton(Form)
        self.removeFilesBtn.setObjectName("removeFilesBtn")
        self.removeFilesBtn.setEnabled(False)
        self.verticalLayout_3.addWidget(self.removeFilesBtn)

        self.importBtn = QPushButton(Form)
        self.importBtn.setObjectName("importBtn")
        self.importBtn.setEnabled(False)
        self.verticalLayout_3.addWidget(self.importBtn)

        self.chromTextBtn = QPushButton(Form)
        self.chromTextBtn.setObjectName("chromTextBtn")
        self.chromTextBtn.setEnabled(False)
        self.verticalLayout_3.addWidget(self.chromTextBtn)

        self.saveImported = QPushButton(Form)
        self.saveImported.setObjectName("saveImported")
        self.saveImported.setEnabled(False)
        self.verticalLayout_3.addWidget(self.saveImported)

        spacerItem = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem)

        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.verticalLayout = QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.queueLabel = QLabel(Form)
        self.queueLabel.setObjectName("queueLabel")
        self.verticalLayout.addWidget(self.queueLabel)
        self.queuedTree = QTreeWidget(Form)
        self.queuedTree.setObjectName("treeWidget")
        self.queuedTree.headerItem().setText(0, "1")
        self.verticalLayout.addWidget(self.queuedTree)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.importLabel = QLabel(Form)
        self.importLabel.setObjectName("importLabel")
        self.verticalLayout_2.addWidget(self.importLabel)
        self.importedTree = QTreeWidget(Form)
        self.importedTree.setObjectName("importedTree")
        self.importedTree.headerItem().setText(0, "1")
        self.verticalLayout_2.addWidget(self.importedTree)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.dynamic_plot = FigureCanvas(Figure(figsize=(5, 3)))
        self.horizontalLayout.addWidget(self.dynamic_plot)

        self.retranslateUi(Form)
        self.addFilesBtn.clicked.connect(self.addFiles) # type: ignore
        self.addDirBtn.clicked.connect(self.addDir)
        self.removeFilesBtn.clicked.connect(self.removeFiles) # type: ignore
        self.importBtn.clicked.connect(self.importFiles) # type: ignore
        self.chromTextBtn.clicked.connect(self.writeThermoChromText)
        self.saveImported.clicked.connect(self.pickleImported)
        self.loadImported.clicked.connect(self.unpickleImported)
        self.importedTree.itemDoubleClicked.connect(self.plotTimeSeries)
        self.graphSelectionModel = self.importedTree.selectionModel()
        self.graphSelectionModel.selectionChanged.connect(self.plotSelectedTimeSeries)
        self.dynamic_ax = self.dynamic_plot.figure.subplots()
        QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "Instrument"))
        self.instrumentType.setItemText(0, _translate("Form", "Thermo Element"))
        self.addFilesBtn.setText(_translate("Form", "Add Files(s)"))
        self.addDirBtn.setText(_translate("Form", "Add Folder"))
        self.removeFilesBtn.setText(_translate("Form", "Remove"))
        self.importBtn.setText(_translate("Form", "Import"))
        self.chromTextBtn.setText(_translate("Form","Generate FINs"))
        self.saveImported.setText(_translate("Form","Save Imported"))
        self.loadImported.setText(_translate("Form","Open"))
        self.queueLabel.setText(_translate("Form", "Queued"))
        self.importLabel.setText(_translate("Form", "Imported"))

        self.impGroups = {}
        self.queueGroups = {}

    def importFiles(self):
        directories = self.queuedTree.invisibleRootItem()
        imported = self.importedTree.invisibleRootItem()
        m = 0
        for i in range(directories.childCount()):
            dirItem = directories.child(m)
            dirName = dirItem.text(0)
            if dirItem.checkState(0) == Qt.Checked or Qt.PartiallyChecked:
                k = 0
                for j in range(dirItem.childCount()):
                    fileItem = dirItem.child(k)
                    fileName = fileItem.text(0)
                    if fileItem.checkState(0) == Qt.Checked:
                        s = readThermoElement.sampleData()
                        s.parseDAT(self.dataDir[dirName][fileName]["path"])
                        self.dataDir[dirName][fileName]["data"] = s
                        self.startTime[dirName] = min(
                            self.startTime[dirName],
                            s.fileTimes["DAT"]
                        )
                        dirItem.takeChild(k)
                        self.toImportTree(s.group, s.name, fileName, dirName)
                        self.importLabel.setText(
                            f'Imported: {self.getQueueCount(self.importedTree)} files')
                        self.queueLabel.setText(
                            f'In Queue: {self.getQueueCount(self.queuedTree)} files')
                    else: k+=1
            if dirItem.childCount() == 0:
                directories.takeChild(m)
            else: m += 1
        self.importBtn.setEnabled(self.getQueueCount(self.queuedTree))
        self.removeFilesBtn.setEnabled(self.getQueueCount(self.queuedTree))
        self.chromTextBtn.setEnabled(self.getQueueCount(self.importedTree))
        self.saveImported.setEnabled(self.getQueueCount(self.importedTree))

    def generateChromText(self):
        pass

    def writeThermoChromText(self):
        writeFIN2(self.dataDir)

    def removeFiles(self):
        pass

    def addFiles(self):
        self.getFilterText()
        dlg = QFileDialog()
        dlg.setFileMode(QFileDialog.AnyFile)
        dataFiles, filter = dlg.getOpenFileNames(None, "Select Data Files",self.startDir,self.fileFilter)
        new = 0
        for file in dataFiles:
            head, fileName = os.path.split(str(file))
            head, dirName = os.path.split(head)
            if dirName not in self.dataDir:
                self.dataDir[dirName] = {}
                self.startTime[dirName] = time.localtime(datetime.now().timestamp())
            if fileName.endswith(self.extension):
                self.dataDir[dirName][fileName] = {
                    "imported": False,
                    "path": (str(file))
                }
                new+=1
            if new:
                self.tree_from_dict(self.dataDir, self.queuedTree)
        self.queueLabel.setText(f'In Queue: {self.getQueueCount(self.queuedTree)} files')
        self.importBtn.setEnabled(self.getQueueCount(self.queuedTree))
        self.removeFilesBtn.setEnabled(self.getQueueCount(self.queuedTree))

    def addDir(self):
        self.getFilterText()
        dlg = QFileDialog()
        dirPath = dlg.getExistingDirectory(None, 'Select Data Directory', self.startDir,
                                            QFileDialog.ShowDirsOnly)
        head, dirName = os.path.split(dirPath)
        if dirName not in self.dataDir:
            self.dataDir[dirName] = {}
            self.startTime[dirName] = time.localtime(datetime.now().timestamp())
        new = 0
        for file in os.listdir(dirPath):
            if file.endswith(self.extension):
                self.dataDir[dirName][file] = {
                    "imported": False,
                    "path": os.path.join(dirPath, file)
                }
                new += 1
        if new:
            self.tree_from_dict(self.dataDir, self.queuedTree)
        else:
            del self.dataDir[dirName]
            dlg = QMessageBox()
            dlg.setText("No {self.extension} files found")
            dlg.exec_()
        self.queueLabel.setText(f'In Queue: {self.getQueueCount(self.queuedTree)} files')
        self.importBtn.setEnabled(self.getQueueCount(self.queuedTree))
        self.removeFilesBtn.setEnabled(self.getQueueCount(self.queuedTree))

    def getQueueCount(self, tree):
        inTree = 0
        for i in range(tree.invisibleRootItem().childCount()):
            inTree += tree.invisibleRootItem().child(i).childCount()
        return inTree

    def tree_from_dict(self, data=None, parent=None):
        root = parent.invisibleRootItem()
        parent.setHeaderLabels(["Directory"])
        for folder, files in data.items():
            if not folder in self.queueGroups:
                item = QTreeWidgetItem(root)
                item.setText(0, folder)
                item.setFlags(item.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
                self.queueGroups[folder] = root.indexOfChild(item)
                for file in files:
                    child = QTreeWidgetItem(item)
                    child.setFlags(child.flags() | Qt.ItemIsUserCheckable)
                    child.setText(0, file)
                    child.setCheckState(0, Qt.Unchecked)

    def toImportTree (self, sampleName, fileName, fullFileName, dirName):
        imported = self.importedTree.invisibleRootItem()
        self.importedTree.setHeaderLabels(["Directory"])
        if sampleName in self.impGroups.keys():
            sample = imported.child(self.impGroups[sampleName])
        else:
            sample = QTreeWidgetItem(imported)
            sample.setText(0, sampleName)
            self.impGroups[sampleName] = imported.indexOfChild(sample)
        fileItem = QTreeWidgetItem(sample)
        fileItem.setText(0, fileName)
        fileItem.setText(1, dirName)
        fileItem.setText(2, fullFileName)
        self.importedTree.setColumnHidden(1,False)
        self.importedTree.setColumnHidden(2,False)

    def plotSelectedTimeSeries(self, selected, deselected):
        item = self.importedTree.selectedItems()[0]
        #self.plotTimeSeries(self.importedTree.selectedItems()[0],0)
        dir = item.text(1)
        file = item.text(2)
        s = self.dataDir[dir][file]["data"]
        self.dynamic_ax.cla()
        x = s.scans["scanTime"]
        for isotope in s.isotopes:
            y = s.masses[isotope].massTimeSeries
            self.dynamic_ax.semilogy(x,y)
        self.dynamic_ax.set_ylabel("CPS")
        self.dynamic_ax.set_xlabel("Time(sec)")
        self.dynamic_ax.set_title(item.text(0))
        self.dynamic_ax.legend(s.isotopes)
        self.dynamic_ax.figure.canvas.draw()


    def plotTimeSeries(self, item, column_no):
        dir = item.text(1)
        file = item.text(2)
        s = self.dataDir[dir][file]["data"]
        x = s.scans["scanTime"]
        for isotope in s.isotopes:
            y = s.masses[isotope].massTimeSeries
            plt.semilogy(x,y)
        plt.ylabel("CPS")
        plt.xlabel("Time(sec)")
        plt.title(item.text(0))
        plt.legend(s.isotopes)
        plt.show()

    def pickleImported(self):
        dlg = QFileDialog()
        dlg.setFileMode(QFileDialog.AnyFile)
        pickleFile, filter = dlg.getSaveFileName(
            None,
            "Select Data Files",
            self.startDir,
            "Python Pickle File (*.p)")
        toPickle = {
            "data": self.dataDir
        }
        if pickleFile:
            with open(pickleFile, 'wb') as fid:
                pickle.dump(toPickle, fid)
            fid.close()

    def unpickleImported(self):
        dlg = QFileDialog()
        dlg.setFileMode(QFileDialog.AnyFile)
        pickleFile, filter = dlg.getOpenFileName(
            None,
            "Select Data Files",
            self.startDir,
            "Python Pickle File (*.p)")
        if pickleFile:
            with open(pickleFile, 'rb') as fid:
                pickledDic = pickle.load(fid)
            fid.close()
            self.dataDir = pickledDic["data"]
            for dirName,files in self.dataDir.items():
                for fileName in list(files.keys()):
                    s = self.dataDir[dirName][fileName]["data"]
                    self.toImportTree(s.group, s.name, fileName, dirName)
                    self.queueLabel.setText(f'In Queue: {self.getQueueCount(self.queuedTree)} files')
            self.importBtn.setEnabled(self.getQueueCount(self.queuedTree))
            self.removeFilesBtn.setEnabled(self.getQueueCount(self.queuedTree))
            self.chromTextBtn.setEnabled(self.getQueueCount(self.importedTree))
            self.saveImported.setEnabled(self.getQueueCount(self.importedTree))
        else:
            print("No File to Unpickle")


    def getFilterText(self):
        t = self.instrumentType.currentText()
        if t == "Thermo Element":
            self.fileFilter = "Element Data Files (*.dat)"
            self.extension ='.dat'
        elif t == "P-E NexION":
            self.fileFilter = "Perkin-Elmer NexION (*.*)"
            self.extension ='.csv'
        else:
            self.fileFilter ="Any File (*.*)"
            self.extension ='.txt'

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    Form = QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
